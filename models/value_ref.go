// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValueRef value ref
// swagger:model valueRef
type ValueRef struct {

	// Key of the value referent.
	// Required: true
	// Min Length: 1
	Key string `json:"key"`

	// Name of the value referent.
	// Required: true
	// Min Length: 1
	Name string `json:"name"`

	// Type of the value referent.
	// Required: true
	// Min Length: 1
	// Enum: [configMapKeyRef fieldRef resourceFieldRef secretKeyRef]
	Type string `json:"type"`
}

// Validate validates this value ref
func (m *ValueRef) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValueRef) validateKey(formats strfmt.Registry) error {

	if err := validate.RequiredString("key", "body", string(m.Key)); err != nil {
		return err
	}

	if err := validate.MinLength("key", "body", string(m.Key), 1); err != nil {
		return err
	}

	return nil
}

func (m *ValueRef) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	return nil
}

var valueRefTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["configMapKeyRef","fieldRef","resourceFieldRef","secretKeyRef"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		valueRefTypeTypePropEnum = append(valueRefTypeTypePropEnum, v)
	}
}

const (

	// ValueRefTypeConfigMapKeyRef captures enum value "configMapKeyRef"
	ValueRefTypeConfigMapKeyRef string = "configMapKeyRef"

	// ValueRefTypeFieldRef captures enum value "fieldRef"
	ValueRefTypeFieldRef string = "fieldRef"

	// ValueRefTypeResourceFieldRef captures enum value "resourceFieldRef"
	ValueRefTypeResourceFieldRef string = "resourceFieldRef"

	// ValueRefTypeSecretKeyRef captures enum value "secretKeyRef"
	ValueRefTypeSecretKeyRef string = "secretKeyRef"
)

// prop value enum
func (m *ValueRef) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, valueRefTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ValueRef) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	if err := validate.MinLength("type", "body", string(m.Type), 1); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValueRef) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValueRef) UnmarshalBinary(b []byte) error {
	var res ValueRef
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
