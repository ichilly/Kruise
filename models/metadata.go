// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Metadata metadata
// swagger:model metadata
type Metadata struct {

	// The name of the application
	// Required: true
	// Min Length: 1
	App string `json:"app"`

	// The dependent services of the app
	// Required: true
	Dependencies *Dependencies `json:"dependencies"`

	// The name of the environment
	// Required: true
	// Min Length: 1
	// Enum: [DEV INT STG PRD]
	Env string `json:"env"`

	// The namespace to deploy to
	// Min Length: 1
	Namespace string `json:"namespace,omitempty"`

	// The output format of the result
	// Min Length: 1
	// Enum: [yaml kustomize]
	Output string `json:"output,omitempty"`

	// The plugins for app deployment
	Plugins *Plugins `json:"plugins,omitempty"`

	// The version of the application
	// Required: true
	// Min Length: 1
	Version string `json:"version"`
}

// Validate validates this metadata
func (m *Metadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metadata) validateApp(formats strfmt.Registry) error {

	if err := validate.RequiredString("app", "body", string(m.App)); err != nil {
		return err
	}

	if err := validate.MinLength("app", "body", string(m.App), 1); err != nil {
		return err
	}

	return nil
}

func (m *Metadata) validateDependencies(formats strfmt.Registry) error {

	if err := validate.Required("dependencies", "body", m.Dependencies); err != nil {
		return err
	}

	if m.Dependencies != nil {
		if err := m.Dependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dependencies")
			}
			return err
		}
	}

	return nil
}

var metadataTypeEnvPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEV","INT","STG","PRD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metadataTypeEnvPropEnum = append(metadataTypeEnvPropEnum, v)
	}
}

const (

	// MetadataEnvDEV captures enum value "DEV"
	MetadataEnvDEV string = "DEV"

	// MetadataEnvINT captures enum value "INT"
	MetadataEnvINT string = "INT"

	// MetadataEnvSTG captures enum value "STG"
	MetadataEnvSTG string = "STG"

	// MetadataEnvPRD captures enum value "PRD"
	MetadataEnvPRD string = "PRD"
)

// prop value enum
func (m *Metadata) validateEnvEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metadataTypeEnvPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Metadata) validateEnv(formats strfmt.Registry) error {

	if err := validate.RequiredString("env", "body", string(m.Env)); err != nil {
		return err
	}

	if err := validate.MinLength("env", "body", string(m.Env), 1); err != nil {
		return err
	}

	// value enum
	if err := m.validateEnvEnum("env", "body", m.Env); err != nil {
		return err
	}

	return nil
}

func (m *Metadata) validateNamespace(formats strfmt.Registry) error {

	if swag.IsZero(m.Namespace) { // not required
		return nil
	}

	if err := validate.MinLength("namespace", "body", string(m.Namespace), 1); err != nil {
		return err
	}

	return nil
}

var metadataTypeOutputPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yaml","kustomize"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metadataTypeOutputPropEnum = append(metadataTypeOutputPropEnum, v)
	}
}

const (

	// MetadataOutputYaml captures enum value "yaml"
	MetadataOutputYaml string = "yaml"

	// MetadataOutputKustomize captures enum value "kustomize"
	MetadataOutputKustomize string = "kustomize"
)

// prop value enum
func (m *Metadata) validateOutputEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metadataTypeOutputPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Metadata) validateOutput(formats strfmt.Registry) error {

	if swag.IsZero(m.Output) { // not required
		return nil
	}

	if err := validate.MinLength("output", "body", string(m.Output), 1); err != nil {
		return err
	}

	// value enum
	if err := m.validateOutputEnum("output", "body", m.Output); err != nil {
		return err
	}

	return nil
}

func (m *Metadata) validatePlugins(formats strfmt.Registry) error {

	if swag.IsZero(m.Plugins) { // not required
		return nil
	}

	if m.Plugins != nil {
		if err := m.Plugins.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plugins")
			}
			return err
		}
	}

	return nil
}

func (m *Metadata) validateVersion(formats strfmt.Registry) error {

	if err := validate.RequiredString("version", "body", string(m.Version)); err != nil {
		return err
	}

	if err := validate.MinLength("version", "body", string(m.Version), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Metadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Metadata) UnmarshalBinary(b []byte) error {
	var res Metadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
