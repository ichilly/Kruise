// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeMounts volume mounts
// swagger:model volumeMounts
type VolumeMounts struct {

	// config map
	// Required: true
	ConfigMap string `json:"configMap"`

	// mount path
	// Required: true
	MountPath string `json:"mountPath"`

	// name
	// Required: true
	Name string `json:"name"`

	// read only
	// Required: true
	ReadOnly bool `json:"readOnly"`
}

// Validate validates this volume mounts
func (m *VolumeMounts) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadOnly(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeMounts) validateConfigMap(formats strfmt.Registry) error {

	if err := validate.RequiredString("configMap", "body", string(m.ConfigMap)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeMounts) validateMountPath(formats strfmt.Registry) error {

	if err := validate.RequiredString("mountPath", "body", string(m.MountPath)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeMounts) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *VolumeMounts) validateReadOnly(formats strfmt.Registry) error {

	if err := validate.Required("readOnly", "body", bool(m.ReadOnly)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeMounts) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeMounts) UnmarshalBinary(b []byte) error {
	var res VolumeMounts
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
