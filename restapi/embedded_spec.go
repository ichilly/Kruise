// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "text/plain"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Kubernetes service configurator",
    "title": "Kruise",
    "version": "0.0.1"
  },
  "paths": {
    "/v1/app/configs": {
      "post": {
        "description": "Creates the application configurations",
        "tags": [
          "config"
        ],
        "operationId": "createAppConfig",
        "parameters": [
          {
            "description": "the application object",
            "name": "application",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/application"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "$ref": "#/responses/BadRequest"
          },
          "default": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/health": {
      "get": {
        "description": "Get the current health of the API",
        "tags": [
          "health"
        ],
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "Get current health response",
            "schema": {
              "$ref": "#/definitions/healthStatus"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "application": {
      "type": "object",
      "required": [
        "metadata",
        "component"
      ],
      "properties": {
        "component": {
          "$ref": "#/definitions/component"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      }
    },
    "component": {
      "type": "object",
      "required": [
        "containers"
      ],
      "properties": {
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/container"
          }
        },
        "replicas": {
          "description": "The number of pods to deploy",
          "type": "integer",
          "default": 1,
          "x-nullable": false
        },
        "service": {
          "$ref": "#/definitions/service"
        }
      }
    },
    "container": {
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "command": {
          "description": "The command to run for the docker image's entrypoint.",
          "type": "string",
          "x-nullable": true
        },
        "env": {
          "x-nullable": false,
          "$ref": "#/definitions/env"
        },
        "image": {
          "description": "The docker image name for the container",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always or IfNotPresent.",
          "type": "string",
          "default": "Always",
          "minLength": 1,
          "enum": [
            "Always",
            "IfNotPresent"
          ],
          "x-nullable": false
        },
        "imageTag": {
          "description": "The docker image tag for the container",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "name": {
          "description": "The name of this container within the service",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "portNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "volumeMounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/volumeMounts"
          },
          "x-nullable": true
        }
      }
    },
    "dependencies": {
      "type": "object",
      "default": {
        "aws": false,
        "mysql": false
      },
      "properties": {
        "aws": {
          "type": "boolean",
          "default": false
        },
        "mysql": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "env": {
      "type": "object",
      "properties": {
        "valueFroms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/valueFrom"
          },
          "x-nullable": true
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/value"
          },
          "x-nullable": true
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        }
      }
    },
    "healthStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "metadata": {
      "type": "object",
      "required": [
        "app",
        "version",
        "env",
        "dependencies"
      ],
      "properties": {
        "app": {
          "description": "The name of the application",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "dependencies": {
          "description": "The dependent services of the app",
          "$ref": "#/definitions/dependencies"
        },
        "env": {
          "description": "The name of the environment",
          "type": "string",
          "minLength": 1,
          "enum": [
            "DEV",
            "INT",
            "STG",
            "PRD"
          ],
          "x-nullable": false
        },
        "namespace": {
          "description": "The namespace to deploy to",
          "type": "string",
          "default": "default",
          "minLength": 1,
          "x-nullable": false
        },
        "output": {
          "description": "The output format of the result",
          "type": "string",
          "default": "yaml",
          "minLength": 1,
          "enum": [
            "yaml",
            "kustomize"
          ],
          "x-nullable": false
        },
        "plugins": {
          "description": "The plugins for app deployment",
          "$ref": "#/definitions/plugins"
        },
        "version": {
          "description": "The version of the application",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        }
      }
    },
    "plugins": {
      "type": "object",
      "default": {
        "swagger": true
      },
      "properties": {
        "swagger": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "service": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the service",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/servicePort"
          }
        },
        "type": {
          "description": "The service type",
          "type": "string",
          "default": "ClusterIP",
          "enum": [
            "ClusterIP",
            "ExternalName",
            "LoadBalancer",
            "NodePort"
          ],
          "x-nullable": false
        }
      }
    },
    "servicePort": {
      "type": "object",
      "required": [
        "targetPort"
      ],
      "properties": {
        "name": {
          "description": "The name of this port within the service",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "port": {
          "description": "The port that will be exposed by this service",
          "type": "integer",
          "default": 80,
          "x-nullable": false
        },
        "protocol": {
          "description": "The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP",
          "type": "string",
          "default": "TCP",
          "minLength": 1,
          "enum": [
            "TCP",
            "UDP"
          ],
          "x-nullable": false
        },
        "targetPort": {
          "description": "Number or name of the port to access on the pods targeted by the service",
          "type": "integer",
          "default": 80,
          "x-nullable": false
        }
      }
    },
    "value": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "description": "Name of the environment variable.",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "value": {
          "description": "Value of the environment variable.",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        }
      }
    },
    "valueFrom": {
      "type": "object",
      "required": [
        "name",
        "valueRef"
      ],
      "properties": {
        "name": {
          "description": "Name of the environment variable.",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "valueRef": {
          "$ref": "#/definitions/valueRef"
        }
      }
    },
    "valueRef": {
      "type": "object",
      "required": [
        "type",
        "name",
        "key"
      ],
      "properties": {
        "key": {
          "description": "Key of the value referent.",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "name": {
          "description": "Name of the value referent.",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "type": {
          "description": "Type of the value referent.",
          "type": "string",
          "minLength": 1,
          "enum": [
            "configMapKeyRef",
            "fieldRef",
            "resourceFieldRef",
            "secretKeyRef"
          ],
          "x-nullable": false
        }
      }
    },
    "volumeMounts": {
      "type": "object",
      "required": [
        "name",
        "mountPath",
        "readOnly",
        "configMap"
      ],
      "properties": {
        "configMap": {
          "type": "string",
          "x-nullable": false
        },
        "mountPath": {
          "type": "string",
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "x-nullable": false
        },
        "readOnly": {
          "type": "boolean",
          "default": true
        }
      }
    }
  },
  "responses": {
    "BadRequest": {
      "description": "Bad request",
      "schema": {
        "type": "string"
      }
    },
    "InternalServerError": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/error"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "text/plain"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Kubernetes service configurator",
    "title": "Kruise",
    "version": "0.0.1"
  },
  "paths": {
    "/v1/app/configs": {
      "post": {
        "description": "Creates the application configurations",
        "tags": [
          "config"
        ],
        "operationId": "createAppConfig",
        "parameters": [
          {
            "description": "the application object",
            "name": "application",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/application"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/v1/health": {
      "get": {
        "description": "Get the current health of the API",
        "tags": [
          "health"
        ],
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "Get current health response",
            "schema": {
              "$ref": "#/definitions/healthStatus"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "application": {
      "type": "object",
      "required": [
        "metadata",
        "component"
      ],
      "properties": {
        "component": {
          "$ref": "#/definitions/component"
        },
        "metadata": {
          "$ref": "#/definitions/metadata"
        }
      }
    },
    "component": {
      "type": "object",
      "required": [
        "containers"
      ],
      "properties": {
        "containers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/container"
          }
        },
        "replicas": {
          "description": "The number of pods to deploy",
          "type": "integer",
          "default": 1,
          "x-nullable": false
        },
        "service": {
          "$ref": "#/definitions/service"
        }
      }
    },
    "container": {
      "type": "object",
      "required": [
        "image"
      ],
      "properties": {
        "command": {
          "description": "The command to run for the docker image's entrypoint.",
          "type": "string",
          "x-nullable": true
        },
        "env": {
          "x-nullable": false,
          "$ref": "#/definitions/env"
        },
        "image": {
          "description": "The docker image name for the container",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always or IfNotPresent.",
          "type": "string",
          "default": "Always",
          "minLength": 1,
          "enum": [
            "Always",
            "IfNotPresent"
          ],
          "x-nullable": false
        },
        "imageTag": {
          "description": "The docker image tag for the container",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "name": {
          "description": "The name of this container within the service",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "portNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "volumeMounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/volumeMounts"
          },
          "x-nullable": true
        }
      }
    },
    "dependencies": {
      "type": "object",
      "default": {
        "aws": false,
        "mysql": false
      },
      "properties": {
        "aws": {
          "type": "boolean",
          "default": false
        },
        "mysql": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "env": {
      "type": "object",
      "properties": {
        "valueFroms": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/valueFrom"
          },
          "x-nullable": true
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/value"
          },
          "x-nullable": true
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        }
      }
    },
    "healthStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "metadata": {
      "type": "object",
      "required": [
        "app",
        "version",
        "env",
        "dependencies"
      ],
      "properties": {
        "app": {
          "description": "The name of the application",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "dependencies": {
          "description": "The dependent services of the app",
          "$ref": "#/definitions/dependencies"
        },
        "env": {
          "description": "The name of the environment",
          "type": "string",
          "minLength": 1,
          "enum": [
            "DEV",
            "INT",
            "STG",
            "PRD"
          ],
          "x-nullable": false
        },
        "namespace": {
          "description": "The namespace to deploy to",
          "type": "string",
          "default": "default",
          "minLength": 1,
          "x-nullable": false
        },
        "output": {
          "description": "The output format of the result",
          "type": "string",
          "default": "yaml",
          "minLength": 1,
          "enum": [
            "yaml",
            "kustomize"
          ],
          "x-nullable": false
        },
        "plugins": {
          "description": "The plugins for app deployment",
          "$ref": "#/definitions/plugins"
        },
        "version": {
          "description": "The version of the application",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        }
      }
    },
    "plugins": {
      "type": "object",
      "default": {
        "swagger": true
      },
      "properties": {
        "swagger": {
          "type": "boolean",
          "default": true
        }
      }
    },
    "service": {
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the service",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/servicePort"
          }
        },
        "type": {
          "description": "The service type",
          "type": "string",
          "default": "ClusterIP",
          "enum": [
            "ClusterIP",
            "ExternalName",
            "LoadBalancer",
            "NodePort"
          ],
          "x-nullable": false
        }
      }
    },
    "servicePort": {
      "type": "object",
      "required": [
        "targetPort"
      ],
      "properties": {
        "name": {
          "description": "The name of this port within the service",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "port": {
          "description": "The port that will be exposed by this service",
          "type": "integer",
          "default": 80,
          "x-nullable": false
        },
        "protocol": {
          "description": "The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP",
          "type": "string",
          "default": "TCP",
          "minLength": 1,
          "enum": [
            "TCP",
            "UDP"
          ],
          "x-nullable": false
        },
        "targetPort": {
          "description": "Number or name of the port to access on the pods targeted by the service",
          "type": "integer",
          "default": 80,
          "x-nullable": false
        }
      }
    },
    "value": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "description": "Name of the environment variable.",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "value": {
          "description": "Value of the environment variable.",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        }
      }
    },
    "valueFrom": {
      "type": "object",
      "required": [
        "name",
        "valueRef"
      ],
      "properties": {
        "name": {
          "description": "Name of the environment variable.",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "valueRef": {
          "$ref": "#/definitions/valueRef"
        }
      }
    },
    "valueRef": {
      "type": "object",
      "required": [
        "type",
        "name",
        "key"
      ],
      "properties": {
        "key": {
          "description": "Key of the value referent.",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "name": {
          "description": "Name of the value referent.",
          "type": "string",
          "minLength": 1,
          "x-nullable": false
        },
        "type": {
          "description": "Type of the value referent.",
          "type": "string",
          "minLength": 1,
          "enum": [
            "configMapKeyRef",
            "fieldRef",
            "resourceFieldRef",
            "secretKeyRef"
          ],
          "x-nullable": false
        }
      }
    },
    "volumeMounts": {
      "type": "object",
      "required": [
        "name",
        "mountPath",
        "readOnly",
        "configMap"
      ],
      "properties": {
        "configMap": {
          "type": "string",
          "x-nullable": false
        },
        "mountPath": {
          "type": "string",
          "x-nullable": false
        },
        "name": {
          "type": "string",
          "x-nullable": false
        },
        "readOnly": {
          "type": "boolean",
          "default": true
        }
      }
    }
  },
  "responses": {
    "BadRequest": {
      "description": "Bad request",
      "schema": {
        "type": "string"
      }
    },
    "InternalServerError": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/error"
      }
    }
  }
}`))
}
