// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ichilly/Kruise/models"
)

// CreateAppConfigCreatedCode is the HTTP code returned for type CreateAppConfigCreated
const CreateAppConfigCreatedCode int = 201

/*CreateAppConfigCreated created

swagger:response createAppConfigCreated
*/
type CreateAppConfigCreated struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateAppConfigCreated creates CreateAppConfigCreated with default headers values
func NewCreateAppConfigCreated() *CreateAppConfigCreated {

	return &CreateAppConfigCreated{}
}

// WithPayload adds the payload to the create app config created response
func (o *CreateAppConfigCreated) WithPayload(payload string) *CreateAppConfigCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create app config created response
func (o *CreateAppConfigCreated) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAppConfigCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// CreateAppConfigBadRequestCode is the HTTP code returned for type CreateAppConfigBadRequest
const CreateAppConfigBadRequestCode int = 400

/*CreateAppConfigBadRequest Bad request

swagger:response createAppConfigBadRequest
*/
type CreateAppConfigBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateAppConfigBadRequest creates CreateAppConfigBadRequest with default headers values
func NewCreateAppConfigBadRequest() *CreateAppConfigBadRequest {

	return &CreateAppConfigBadRequest{}
}

// WithPayload adds the payload to the create app config bad request response
func (o *CreateAppConfigBadRequest) WithPayload(payload string) *CreateAppConfigBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create app config bad request response
func (o *CreateAppConfigBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAppConfigBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*CreateAppConfigDefault Internal server error

swagger:response createAppConfigDefault
*/
type CreateAppConfigDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateAppConfigDefault creates CreateAppConfigDefault with default headers values
func NewCreateAppConfigDefault(code int) *CreateAppConfigDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateAppConfigDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create app config default response
func (o *CreateAppConfigDefault) WithStatusCode(code int) *CreateAppConfigDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create app config default response
func (o *CreateAppConfigDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the create app config default response
func (o *CreateAppConfigDefault) WithPayload(payload *models.Error) *CreateAppConfigDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create app config default response
func (o *CreateAppConfigDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAppConfigDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
